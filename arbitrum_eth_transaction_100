from web3 import Web3
import time
import random

def main():
    rpc_url = 'https://arb1.arbitrum.io/rpc'
    w3 = Web3(Web3.HTTPProvider(rpc_url))
    assert w3.is_connected(), "Не удалось подключиться к сети Arbitrum"

    # Адрес получателя (задан внутри кода)
    recipient_address = Web3.to_checksum_address("0xYourRecipientAddressHere")

    # Чтение приватных ключей из файла
    with open('private_keys.txt', 'r') as f:
        private_keys = [line.strip() for line in f if line.strip()]

    # Перебираем ключи и отправляем ETH
    for private_key in private_keys:
        account = w3.eth.account.from_key(private_key)
        from_address = account.address

        nonce = w3.eth.get_transaction_count(from_address)
        balance = w3.eth.get_balance(from_address)

        # Получаем текущую цену газа
        latest_block = w3.eth.get_block('latest')
        base_fee = latest_block.get('baseFeePerGas', w3.eth.gas_price)
        max_priority_fee = w3.to_wei('0.1', 'gwei')
        max_fee_per_gas = base_fee + max_priority_fee

        # Оценка газа для транзакции
        estimated_gas = w3.eth.estimate_gas({
            'from': from_address,
            'to': recipient_address,
            'value': 0  # временно для оценки
        })

        # Расчет стоимости комиссии
        total_gas_cost = estimated_gas * max_fee_per_gas

        # Сумма отправки = баланс - комиссия
        send_value = balance - total_gas_cost

        if send_value <= 0:
            print(f"Недостаточно средств на кошельке {from_address} для покрытия комиссии.")
            continue

        tx = {
            'nonce': nonce,
            'to': recipient_address,
            'value': send_value,
            'gas': estimated_gas,
            'maxFeePerGas': max_fee_per_gas,
            'maxPriorityFeePerGas': max_priority_fee,
            'chainId': 42161,
            'type': 2
        }

        signed_tx = w3.eth.account.sign_transaction(tx, private_key)

        try:
            tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
            eth_sent = w3.from_wei(send_value, 'ether')
            print(f"Отправлено {eth_sent} ETH с кошелька {from_address}. Хеш: {tx_hash.hex()}")
        except Exception as e:
            print(f"Ошибка отправки с кошелька {from_address}: {e}")

        # Пауза между отправками от 15 до 60 секунд
        delay = random.randint(15, 60)
        print(f"Ожидание {delay} секунд перед следующей транзакцией.")
        time.sleep(delay)

if __name__ == "__main__":
    main()
